"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCommand = void 0;
const framework_1 = require("@sapphire/framework");
const discord_js_1 = require("discord.js");
class HelpCommand extends framework_1.Command {
    registerApplicationCommands(registry) {
        registry.registerChatInputCommand((builder) => builder.setName('help')
            .setDescription('Generate a list of commands')
            .addStringOption((option) => option.setName("command")
            .setDescription("The command that you want to see more info on."))
            .addStringOption((option) => option.setName("module")
            .setDescription("The moudle that you want to see more info on.")
            // .setAutocomplete(true)
            .setChoices(...[
            { name: "ping", value: "ping" }
        ])));
    }
    async chatInputRun(interaction) {
        let categories = this.container.stores.get("commands").categories;
        let str = '**Modules**\n';
        categories.reverse().map(c => str += `\`${c}\`, `);
        str = str.substring(0, str.length - 2);
        let embed = new discord_js_1.EmbedBuilder()
            .setTitle('Help')
            .setDescription(str)
            .setTimestamp()
            .setColor('#89CFF0')
            .setFooter({
            text: 'test',
            iconURL: interaction.user.avatarURL()
        });
        // Get more info on a command or module
        const getCommand = interaction.options.getString("command", false);
        const getModule = interaction.options.getString("module", false);
        if (getCommand) {
            console.log(getCommand);
        }
        // Row Builder
        let options = [];
        for (var i = 0; i < categories.length; i++) {
            options.push({
                label: categories[i].charAt(0).toUpperCase() + categories[i].slice(1),
                value: categories[i]
            });
        }
        const selectMenu = new discord_js_1.StringSelectMenuBuilder()
            .setCustomId('select')
            .setPlaceholder('Nothing selected')
            .addOptions(options);
        const row = new discord_js_1.ActionRowBuilder().addComponents(selectMenu);
        await interaction.reply({ embeds: [embed], components: [row] });
    }
}
exports.HelpCommand = HelpCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmFsL2hlbHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbURBQWdFO0FBRWhFLDJDQUE0STtBQUU1SSxNQUFhLFdBQVksU0FBUSxtQkFBTztJQUNwQiwyQkFBMkIsQ0FBQyxRQUFtQztRQUMzRSxRQUFRLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUMxQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQzthQUN0QixjQUFjLENBQUMsNkJBQTZCLENBQUM7YUFDN0MsZUFBZSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDeEIsY0FBYyxDQUFDLGdEQUFnRCxDQUFDLENBQ3BFO2FBQ0EsZUFBZSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7YUFDdkIsY0FBYyxDQUFDLCtDQUErQyxDQUFDO1lBQ2hFLHlCQUF5QjthQUN4QixVQUFVLENBQUMsR0FBRztZQUNYLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO1NBQ2xDLENBQUMsQ0FDTCxDQUNKLENBQUM7SUFDTixDQUFDO0lBRU0sS0FBSyxDQUFDLFlBQVksQ0FBQyxXQUFnRDtRQUN0RSxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQ2xFLElBQUksR0FBRyxHQUFHLGVBQWUsQ0FBQztRQUMxQixVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLEtBQUssR0FBRyxJQUFJLHlCQUFZLEVBQUU7YUFDekIsUUFBUSxDQUFDLE1BQU0sQ0FBQzthQUNoQixjQUFjLENBQUMsR0FBRyxDQUFDO2FBQ25CLFlBQVksRUFBRTthQUNkLFFBQVEsQ0FBQyxTQUFTLENBQUM7YUFDbkIsU0FBUyxDQUFDO1lBQ1AsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7U0FDNUMsQ0FBQyxDQUFDO1FBRUgsdUNBQXVDO1FBQ3ZDLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuRSxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFakUsSUFBRyxVQUFVLEVBQUU7WUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzNCO1FBRUQsY0FBYztRQUNkLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNULEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNyRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQzthQUN2QixDQUFDLENBQUE7U0FDTDtRQUVELE1BQU0sVUFBVSxHQUFHLElBQUksb0NBQXVCLEVBQUU7YUFDM0MsV0FBVyxDQUFDLFFBQVEsQ0FBQzthQUNyQixjQUFjLENBQUMsa0JBQWtCLENBQUM7YUFDbEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXhCLE1BQU0sR0FBRyxHQUFHLElBQUksNkJBQWdCLEVBQTJCLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRXJGLE1BQU0sV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0NBQ0o7QUE3REQsa0NBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhdElucHV0Q29tbWFuZCwgQ29tbWFuZCB9IGZyb20gJ0BzYXBwaGlyZS9mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBpc01lc3NhZ2VJbnN0YW5jZSB9IGZyb20gJ0BzYXBwaGlyZS9kaXNjb3JkLmpzLXV0aWxpdGllcyc7XHJcbmltcG9ydCB7IE1lc3NhZ2UsIEVtYmVkQnVpbGRlciwgQXBwbGljYXRpb25Db21tYW5kTWFuYWdlciwgQWN0aW9uUm93QnVpbGRlciwgRXZlbnRzLCBTdHJpbmdTZWxlY3RNZW51QnVpbGRlciwgQWN0aW9uUm93IH0gZnJvbSAnZGlzY29yZC5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSGVscENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcclxuICAgIHB1YmxpYyBvdmVycmlkZSByZWdpc3RlckFwcGxpY2F0aW9uQ29tbWFuZHMocmVnaXN0cnk6IENoYXRJbnB1dENvbW1hbmQuUmVnaXN0cnkpIHtcclxuICAgICAgICByZWdpc3RyeS5yZWdpc3RlckNoYXRJbnB1dENvbW1hbmQoKGJ1aWxkZXIpID0+XHJcbiAgICAgICAgICAgIGJ1aWxkZXIuc2V0TmFtZSgnaGVscCcpXHJcbiAgICAgICAgICAgIC5zZXREZXNjcmlwdGlvbignR2VuZXJhdGUgYSBsaXN0IG9mIGNvbW1hbmRzJylcclxuICAgICAgICAgICAgLmFkZFN0cmluZ09wdGlvbigob3B0aW9uKSA9PlxyXG4gICAgICAgICAgICAgICAgb3B0aW9uLnNldE5hbWUoXCJjb21tYW5kXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0RGVzY3JpcHRpb24oXCJUaGUgY29tbWFuZCB0aGF0IHlvdSB3YW50IHRvIHNlZSBtb3JlIGluZm8gb24uXCIpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmFkZFN0cmluZ09wdGlvbigob3B0aW9uKSA9PlxyXG4gICAgICAgICAgICAgICAgb3B0aW9uLnNldE5hbWUoXCJtb2R1bGVcIilcclxuICAgICAgICAgICAgICAgIC5zZXREZXNjcmlwdGlvbihcIlRoZSBtb3VkbGUgdGhhdCB5b3Ugd2FudCB0byBzZWUgbW9yZSBpbmZvIG9uLlwiKVxyXG4gICAgICAgICAgICAgICAgLy8gLnNldEF1dG9jb21wbGV0ZSh0cnVlKVxyXG4gICAgICAgICAgICAgICAgLnNldENob2ljZXMoLi4uW1xyXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTogXCJwaW5nXCIsIHZhbHVlOiBcInBpbmdcIiB9XHJcbiAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgY2hhdElucHV0UnVuKGludGVyYWN0aW9uOiBDb21tYW5kLkNoYXRJbnB1dENvbW1hbmRJbnRlcmFjdGlvbikge1xyXG4gICAgICAgIGxldCBjYXRlZ29yaWVzID0gdGhpcy5jb250YWluZXIuc3RvcmVzLmdldChcImNvbW1hbmRzXCIpLmNhdGVnb3JpZXM7XHJcbiAgICAgICAgbGV0IHN0ciA9ICcqKk1vZHVsZXMqKlxcbic7XHJcbiAgICAgICAgY2F0ZWdvcmllcy5yZXZlcnNlKCkubWFwKGMgPT4gc3RyICs9IGBcXGAke2N9XFxgLCBgKTtcclxuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIHN0ci5sZW5ndGggLSAyKTtcclxuICAgICAgICBsZXQgZW1iZWQgPSBuZXcgRW1iZWRCdWlsZGVyKClcclxuICAgICAgICAgICAgLnNldFRpdGxlKCdIZWxwJylcclxuICAgICAgICAgICAgLnNldERlc2NyaXB0aW9uKHN0cilcclxuICAgICAgICAgICAgLnNldFRpbWVzdGFtcCgpXHJcbiAgICAgICAgICAgIC5zZXRDb2xvcignIzg5Q0ZGMCcpXHJcbiAgICAgICAgICAgIC5zZXRGb290ZXIoe1xyXG4gICAgICAgICAgICAgICAgdGV4dDogJ3Rlc3QnLFxyXG4gICAgICAgICAgICAgICAgaWNvblVSTDogaW50ZXJhY3Rpb24udXNlci5hdmF0YXJVUkwoKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBHZXQgbW9yZSBpbmZvIG9uIGEgY29tbWFuZCBvciBtb2R1bGVcclxuICAgICAgICBjb25zdCBnZXRDb21tYW5kID0gaW50ZXJhY3Rpb24ub3B0aW9ucy5nZXRTdHJpbmcoXCJjb21tYW5kXCIsIGZhbHNlKTtcclxuICAgICAgICBjb25zdCBnZXRNb2R1bGUgPSBpbnRlcmFjdGlvbi5vcHRpb25zLmdldFN0cmluZyhcIm1vZHVsZVwiLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIGlmKGdldENvbW1hbmQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZ2V0Q29tbWFuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSb3cgQnVpbGRlclxyXG4gICAgICAgIGxldCBvcHRpb25zID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYXRlZ29yaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogY2F0ZWdvcmllc1tpXS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhdGVnb3JpZXNbaV0uc2xpY2UoMSksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogY2F0ZWdvcmllc1tpXVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VsZWN0TWVudSA9IG5ldyBTdHJpbmdTZWxlY3RNZW51QnVpbGRlcigpXHJcbiAgICAgICAgICAgIC5zZXRDdXN0b21JZCgnc2VsZWN0JylcclxuICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdOb3RoaW5nIHNlbGVjdGVkJylcclxuICAgICAgICAgICAgLmFkZE9wdGlvbnMob3B0aW9ucylcclxuXHJcbiAgICAgICAgY29uc3Qgcm93ID0gbmV3IEFjdGlvblJvd0J1aWxkZXI8U3RyaW5nU2VsZWN0TWVudUJ1aWxkZXI+KCkuYWRkQ29tcG9uZW50cyhzZWxlY3RNZW51KVxyXG5cclxuICAgICAgICBhd2FpdCBpbnRlcmFjdGlvbi5yZXBseSh7IGVtYmVkczogW2VtYmVkXSwgY29tcG9uZW50czogW3Jvd10gfSk7XHJcbiAgICB9XHJcbn0iXX0=