"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.levelHandler = exports.GetUserXP = exports.AddXP = exports.GetGlobalPrestigeXP = exports.GetGlobalXP = void 0;
const index_1 = require("../index");
const index_2 = require("./index");
// const complexity = require('complexity-report');
// const complexityThreshold = 5;
const ratelimit = 60000;
const cooldown = new Map();
function GetGlobalXP(lvl) {
    return Math.trunc((lvl - 1 + 2 * 300 * Math.pow(2, (lvl - 1) / 7)) / 4);
}
exports.GetGlobalXP = GetGlobalXP;
function GetGlobalPrestigeXP(lvl, prestige) {
    return Math.trunc((lvl - 1 + 300 * Math.pow(2, (lvl - 1) / prestige)) / 4);
}
exports.GetGlobalPrestigeXP = GetGlobalPrestigeXP;
function between(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}
function AddXP(msg, userType) {
    let random = between(20, 40);
    if (userType === "STAFF" || userType === "DEV")
        random = between(40, 180);
    return Math.trunc(random + 1 + (0.1 * msg.content.length));
}
exports.AddXP = AddXP;
async function GetUserXP(user) {
    try {
        return await index_1.prisma.leveling.findUnique({
            where: {
                userId: user
            }
        });
    }
    catch (err) {
        return (0, index_2.log)("error", "Leveling.GetUserXP", `Something went wrong when trying to recieve user data.\n ${err.stack}`);
    }
}
exports.GetUserXP = GetUserXP;
async function levelHandler(msg, levels, user) {
    // Cooldowns
    if (!cooldown.has(msg.author.id)) {
        cooldown.set(msg.author.id, 0);
    }
    if (cooldown.has(msg.author.id)) {
        let messageCount = cooldown.get(msg.author.id);
        console.log(messageCount);
        if (messageCount >= 4)
            return;
        cooldown.set(msg.author.id, messageCount ? messageCount + 1 : 1);
    }
    setTimeout(() => {
        cooldown.set(msg.author.id, 0);
    }, ratelimit);
    // Give user XP
    if (user) {
        let currentXp = levels.currentXp;
        currentXp += AddXP(msg, user.userType);
        await index_1.prisma.leveling.update({
            where: {
                userId: msg.author.id
            },
            data: {
                currentXp: currentXp
            }
        });
    }
    else {
        await index_1.prisma.leveling.update({
            where: {
                userId: msg.author.id
            },
            data: {
                currentXp: AddXP(msg, user.userType)
            }
        });
    }
    let currentLevel;
    let LevelUpXP = GetGlobalXP(levels.level + 1);
    for (let i = 1; i < levels.level; i++) {
        LevelUpXP += GetGlobalXP(i);
    }
    if (levels.currentXp >= LevelUpXP) {
        currentLevel = levels.level += 1;
        await index_1.prisma.leveling.update({
            where: {
                userId: msg.author.id
            },
            data: {
                level: currentLevel
            }
        });
        msg.channel.send({ content: `You just leveled up to ${currentLevel}!` });
    }
}
exports.levelHandler = levelHandler;
//# sourceMappingURL=data:application/json;base64,