//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// main.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// economy.prisma
//

model Leveling {
  currentXp Int    @default(0)
  level     Int    @default(1)
  prestige  Int    @default(0)
  userId    String
  user      Users  @relation(fields: [userId], references: [id])

  @@id([userId])
}

model Inventory {
  item String

  amount     Int @default(1)
  durability Int @default(100)

  userId String
  user   Users  @relation(fields: [userId], references: [id])

  @@unique([userId, item])
  @@index([userId, item])
}

model AuctionHouse {
  id         String    @id @default(cuid())
  userId     String
  user       Economy   @relation(fields: [userId], references: [userId])
  itemId     String
  itemAmount Int       @default(1)
  messageId  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  closed     Boolean   @default(false)
  sold       Boolean   @default(false)

  auctionChannel      String?
  EconomyGuild        EconomyGuild? @relation(fields: [economyGuildUserId, economyGuildGuildId], references: [userId, guildId])
  economyGuildUserId  String?
  economyGuildGuildId String?
}

model Games {
  name   String
  won    Boolean
  bet    BigInt
  earned Int?
  xp     Int?

  userId String
  user   Users  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, name])
}

model Economy {
  cash        Int       @default(0)
  bank        Int       @default(5000)
  bankStorage Int       @default(100)
  networth    Int       @default(0)
  streak      Int
  lastDaily   DateTime?
  locked      Boolean   @default(false)

  userId       String
  user         Users          @relation(fields: [userId], references: [id])
  AuctionHouse AuctionHouse[]

  @@id([userId])
}

model Item {
  id               String   @id
  name             String
  emoji            String
  description      String?
  aliases          String[]
  shortDescription String?
  stackable        Boolean?
  maxQuanity       Int?
  limited          Boolean  @default(false)
  rarity           Int      @default(0)
  type             ItemType

  price     Int
  sellPrice Int?
  lootBox   Boolean

  crafting Json?
}

enum ItemType {
  CARD
  ITEM
  TOOL
  COLLECTABLE
  PACK
}

enum Powers {
  FIRE
  WATER
  EARTH
  WIND
}

//
// guild.prisma
//

model Guild {
  id               String             @id @unique
  settings         Settings[]
  guildType        GuildType          @default(NORMAL)
  blacklisted      Boolean            @default(false)
  GuildUsers       GuildUsers[]
  DisabledCommands DisabledCommands[]
}

model GuildUsers {
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])
  userId  String
  user    Users  @relation(fields: [userId], references: [id])

  @@id([guildId, userId])
}

model EconomyGuild {
  cash        Int       @default(0)
  bank        Int       @default(5000)
  bankStorage Int       @default(100)
  networth    Int       @default(0)
  streak      Int
  lastDaily   DateTime?
  locked      Boolean   @default(false)

  userId  String
  guildId String

  AuctionHouse AuctionHouse[]

  @@id([userId, guildId])
}

model GuildLeveling {
  currentXp Int    @default(0)
  level     Int    @default(1)
  prestige  Int    @default(0)
  userId    String
  guildId   String

  @@id([userId, guildId])
}

model Settings {
  id              String            @id @default(cuid())
  guildId         String
  guild           Guild?            @relation(fields: [guildId], references: [id])
  prefix          String            @default("k?")
  leveling        Boolean           @default(false)
  ignoredChannels String[]
  EconomySettings EconomySettings[]
}

enum GuildType {
  NORMAL
  PREMIUM
}

//
// settings.prisma
//

model EconomySettings {
  id      String    @id @default(cuid())
  guildId String
  guild   Settings? @relation(fields: [guildId], references: [id])
}

model DisabledCommands {
  id       String   @id @default(cuid())
  name     String
  channels String[]
  guildId  String
  guild    Guild?   @relation(fields: [guildId], references: [id])

  @@index([name, guildId])
}

//
// user.prisma
//

model Users {
  id           String         @id @unique
  userType     UserType       @default(NORMAL)
  leveling     Leveling[]
  inventory    Inventory[]
  blacklisted  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  GuildUsers   GuildUsers[]
  Economy      Economy[]
  UserSettings UserSettings[]
  Games        Games[]
}

model UserSettings {
  canDm  Boolean @default(false)
  userId String
  user   Users   @relation(fields: [userId], references: [id])

  @@id([userId])
}

enum UserType {
  NORMAL
  PREMIUM
  STAFF
  DEVELOPER
  OWNER
}
